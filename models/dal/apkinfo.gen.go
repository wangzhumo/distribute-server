// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"com.wangzhumo.distribute/models/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newApkinfo(db *gorm.DB) apkinfo {
	_apkinfo := apkinfo{}

	_apkinfo.apkinfoDo.UseDB(db)
	_apkinfo.apkinfoDo.UseModel(&model.Apkinfo{})

	tableName := _apkinfo.apkinfoDo.TableName()
	_apkinfo.ALL = field.NewField(tableName, "*")
	_apkinfo.ID = field.NewInt32(tableName, "id")
	_apkinfo.ApkIcon = field.NewString(tableName, "apk_icon")
	_apkinfo.ApkName = field.NewString(tableName, "apk_name")
	_apkinfo.AppID = field.NewString(tableName, "app_id")
	_apkinfo.LastRelease = field.NewInt32(tableName, "last_release")

	_apkinfo.fillFieldMap()

	return _apkinfo
}

type apkinfo struct {
	apkinfoDo apkinfoDo

	ALL         field.Field
	ID          field.Int32
	ApkIcon     field.String
	ApkName     field.String
	AppID       field.String
	LastRelease field.Int32

	fieldMap map[string]field.Expr
}

func (a apkinfo) As(alias string) *apkinfo {
	a.apkinfoDo.DO = *(a.apkinfoDo.As(alias).(*gen.DO))

	a.ALL = field.NewField(alias, "*")
	a.ID = field.NewInt32(alias, "id")
	a.ApkIcon = field.NewString(alias, "apk_icon")
	a.ApkName = field.NewString(alias, "apk_name")
	a.AppID = field.NewString(alias, "app_id")
	a.LastRelease = field.NewInt32(alias, "last_release")

	a.fillFieldMap()

	return &a
}

func (a *apkinfo) WithContext(ctx context.Context) *apkinfoDo { return a.apkinfoDo.WithContext(ctx) }

func (a apkinfo) TableName() string { return a.apkinfoDo.TableName() }

func (a *apkinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f.(field.OrderExpr), true
}

func (a *apkinfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["apk_icon"] = a.ApkIcon
	a.fieldMap["apk_name"] = a.ApkName
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["last_release"] = a.LastRelease
}

func (a apkinfo) clone(db *gorm.DB) apkinfo {
	a.apkinfoDo.ReplaceDB(db)
	return a
}

type apkinfoDo struct{ gen.DO }

func (a apkinfoDo) Debug() *apkinfoDo {
	return a.withDO(a.DO.Debug())
}

func (a apkinfoDo) WithContext(ctx context.Context) *apkinfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apkinfoDo) Clauses(conds ...clause.Expression) *apkinfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apkinfoDo) Not(conds ...gen.Condition) *apkinfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apkinfoDo) Or(conds ...gen.Condition) *apkinfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apkinfoDo) Select(conds ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apkinfoDo) Where(conds ...gen.Condition) *apkinfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apkinfoDo) Order(conds ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apkinfoDo) Distinct(cols ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apkinfoDo) Omit(cols ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apkinfoDo) Join(table schema.Tabler, on ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apkinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apkinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apkinfoDo) Group(cols ...field.Expr) *apkinfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apkinfoDo) Having(conds ...gen.Condition) *apkinfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apkinfoDo) Limit(limit int) *apkinfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apkinfoDo) Offset(offset int) *apkinfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apkinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *apkinfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apkinfoDo) Unscoped() *apkinfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apkinfoDo) Create(values ...*model.Apkinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apkinfoDo) CreateInBatches(values []*model.Apkinfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apkinfoDo) Save(values ...*model.Apkinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apkinfoDo) First() (*model.Apkinfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apkinfo), nil
	}
}

func (a apkinfoDo) Take() (*model.Apkinfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apkinfo), nil
	}
}

func (a apkinfoDo) Last() (*model.Apkinfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apkinfo), nil
	}
}

func (a apkinfoDo) Find() ([]*model.Apkinfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.Apkinfo), err
}

func (a apkinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apkinfo, err error) {
	buf := make([]*model.Apkinfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apkinfoDo) FindInBatches(result *[]*model.Apkinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apkinfoDo) Attrs(attrs ...field.AssignExpr) *apkinfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apkinfoDo) Assign(attrs ...field.AssignExpr) *apkinfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apkinfoDo) Joins(field field.RelationField) *apkinfoDo {
	return a.withDO(a.DO.Joins(field))
}

func (a apkinfoDo) Preload(field field.RelationField) *apkinfoDo {
	return a.withDO(a.DO.Preload(field))
}

func (a apkinfoDo) FirstOrInit() (*model.Apkinfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apkinfo), nil
	}
}

func (a apkinfoDo) FirstOrCreate() (*model.Apkinfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apkinfo), nil
	}
}

func (a apkinfoDo) FindByPage(offset int, limit int) (result []*model.Apkinfo, count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	if limit <= 0 {
		return
	}

	result, err = a.Offset(offset).Limit(limit).Find()
	return
}

func (a apkinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *apkinfoDo) withDO(do gen.Dao) *apkinfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
