// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q       = new(Query)
	Apkinfo *apkinfo
	Version *version
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Apkinfo = &Q.Apkinfo
	Version = &Q.Version
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Apkinfo: newApkinfo(db),
		Version: newVersion(db),
	}
}

type Query struct {
	db *gorm.DB

	Apkinfo apkinfo
	Version version
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Apkinfo: q.Apkinfo.clone(db),
		Version: q.Version.clone(db),
	}
}

type queryCtx struct {
	Apkinfo apkinfoDo
	Version versionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Apkinfo: *q.Apkinfo.WithContext(ctx),
		Version: *q.Version.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
